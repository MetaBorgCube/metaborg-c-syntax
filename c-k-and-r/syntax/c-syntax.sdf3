module c-syntax

imports c-lexical
imports c-preprocessor


context-free syntax

  TranslationUnit.TranslationUnit = <
    <{ExternalDeclaration "\n\n"}+>
  >
   
  ExternalDeclaration = FunctionDefinition 
  ExternalDeclaration = Declaration 
  
  FunctionDefinition.FunDef = <
    <DeclarationSpecifier*> <Declarator> <Declaration*> 
    <CompoundStatement>
  > 
  
  Declaration.Decl = <
    <DeclarationSpecifier+> <{InitDeclarator ", "}*>;
  > 
  
  DeclarationSpecifier = StorageClassSpecifier 
  
  DeclarationSpecifier = TypeSpecifier 
  DeclarationSpecifier = TypeQualifier 
  
  StorageClassSpecifier.Auto     = <auto> 
  StorageClassSpecifier.Register = <register> 
  StorageClassSpecifier.Static   = <static> 
  StorageClassSpecifier.Extern   = <extern> 
  StorageClassSpecifier.Typedef  = <typedef> 
  
  TypeSpecifier.Void      = <void> 
  TypeSpecifier.Char      = <char> 
  TypeSpecifier.Short     = <short> 
  TypeSpecifier.Int       = <int> 
  TypeSpecifier.Long      = <long> 
  TypeSpecifier.Float     = <float> 
  TypeSpecifier.Double    = <double> 
  TypeSpecifier.Signed    = <signed> 
  TypeSpecifier.Unsigned  = <unsigned> 
  TypeSpecifier           = StructOrUnionSpecifier 
  TypeSpecifier           = EnumSpecifier 
  
  TypeQualifier.Const     = <const> 
  TypeQualifier.Volatile  = <volatile> 
  
  StructOrUnionSpecifier.StructOrUnion = <
    <StructOrUnion> <ID?> { 
      <StructDeclaration+> 
    }
  > 
  
  StructOrUnionSpecifier.StructOrUnion = <
    <StructOrUnion> <ID>
  > 
  
  StructOrUnion.Struct = <struct> 
  StructOrUnion.Union  = <union> 
  
  InitDeclarator = Declarator 
  
  InitDeclarator.InitDecl = <
    <Declarator> = <Initializer>
  > 
  
  StructDeclaration.StructDecl = <
    <SpecifierQualifier+> <{StructDeclarator ","}+>;
  > 
  
  SpecifierQualifier = TypeSpecifier 
  SpecifierQualifier = TypeQualifier 
  
  StructDeclarator = Declarator 
  
  StructDeclarator.StructDecl = <
    <StructDeclarator?> : <ConstExp>
  > 
  
  EnumSpecifier.EnumSpec = <
    enum <ID?> { 
      <{Enumerator ", "}+> 
    }
  > 
  EnumSpecifier.EnumSpec = <
    enum <ID>
  > 
  
  Enumerator = ID 
  Enumerator.Enumerator = <
    <ID> = <Constant>
  > 
  
  Declarator.Declarator = <
    <Pointer?> <DirectDeclarator>
  > 
  
  DirectDeclarator.IdDecl = ID 
  DirectDeclarator.DeclBracket = <(<Declarator>)> 
  DirectDeclarator.ArrayDecl = <<DirectDeclarator> [<ConstExp?>]> 
  DirectDeclarator.FunDeclTyped = <<DirectDeclarator>(<ParameterTypeList>)> 
  DirectDeclarator.FunDecl = <<DirectDeclarator>(<{ID ", "}*>)> 
  
  ParameterTypeList.ParamList = <<{ParameterDeclaration ", "}+>> 
  ParameterTypeList.ParamListVarArgs = <<{ParameterDeclaration ", "}+> , ...> 
  ParameterDeclaration.ParamDecl1 = <<DeclarationSpecifier+> <Declarator>> 
  ParameterDeclaration.ParamDecl2 = <<DeclarationSpecifier+> <AbstractDeclarator?>> 
  
  Initializer = AssignExp 
  
  Initializer.Initializer = <
    { <{Initializer ", "}+> }
  > 
  Initializer.InitializerComma = <
    { <{Initializer ", "}+> , }
  > 
  
  TypeName.TypedefName = <
    <SpecifierQualifier+> <AbstractDeclarator?>
  > 

  TypeName = ID 
  
  Pointer.Pointer = <* <TypeQualifier*>> 
  Pointer.Pointer = <* <TypeQualifier*> <Pointer>> 
  
  AbstractDeclarator = Pointer 
  
  AbstractDeclarator.DirDecl = <
    <Pointer?> <DirectAbstractDeclarator>
  > 
  
  DirectAbstractDeclarator.AbsDecl = <
    (<AbstractDeclarator>)
  > 
  DirectAbstractDeclarator.ArrayDecl = <
    <DirectAbstractDeclarator?>[<ConstExp>]
  > 
  DirectAbstractDeclarator.FunDecl = <
    <DirectAbstractDeclarator?>(<ParameterTypeList?>)
  > 
  
  Statement.Label   = <<ID> : <Statement>> 
  Statement.Case    = <case <ConstExp> : <Statement>> 
  Statement.Default = <default : <Statement>> 
  
  Statement.Exp = <<Exp>;> 
  Statement.Nop = <;> 
  
  Statement = CompoundStatement 
  
  CompoundStatement.Compound = <
    { 
      <{Declaration "\n"}*> 
      <{Statement "\n"}*> 
    }
  > 
  Statement.If = <
    if(<Exp>) 
      <Statement>
  >
  Statement.IfElse = <
    if(<Exp>) 
      <Statement> 
    else 
      <Statement>
  > 
  Statement.Switch = <
    switch(<Exp>) 
      <Statement>
  >
  Statement.While = <
    while(<Exp>) 
      <Statement>
  > 
  Statement.DoWhile = <
    do 
      <Statement> 
    while(<Exp>);
  > 
  Statement.For = <
    for(<Exp?>; <Exp?>; <Exp?>) 
      <Statement>
  > 
  Statement.Goto = <
    goto <ID>;
  > 
  Statement.Continue = <continue;> 
  Statement.Break    = <break;> 
  Statement.Return   = <return <Exp?>;> 

//context-free syntax
//
//  Start = Exp 

sorts Exp
context-free syntax

  Exp.Comma = <<Exp> , <Exp>> {left}
  
  Exp.Assign = <<Exp> <AssignOp> <Exp>> {right}
  Exp.Cond   = <<Exp> ? <Exp> : <Exp>> {right}
  
  Exp.LOr  = <<Exp> || <Exp>> {left}
  Exp.LAnd = <<Exp> && <Exp>> {left}
  Exp.Ior  = <<Exp> | <Exp>> {left}
  Exp.Eor  = <<Exp> ^ <Exp>> {left}
  Exp.And  = <<Exp> & <Exp>> {left}
  
  Exp.Eq   = <<Exp> == <Exp>> {left}
  Exp.Neq  = <<Exp> != <Exp>> {left}
  Exp.Lt   = [[Exp] < [Exp]] {left}
  Exp.Gt   = [[Exp] > [Exp]] {left}
  Exp.Leq  = [[Exp] <= [Exp]] {left}
  Exp.Geq  = [[Exp] >= [Exp]] {left}
  
  Exp.Lshift = [[Exp] << [Exp]] {left}
  Exp.Rshift = [[Exp] >> [Exp]] {left}
  
  Exp.Add = <<Exp> + <Exp>> {left}
  Exp.Sub = <<Exp> - <Exp>> {left}
  Exp.Mul = <<Exp> * <Exp>> {left}
  Exp.Div = <<Exp> / <Exp>> {left}
  Exp.Mod = <<Exp> % <Exp>> {left}
  
  Exp.Cast      = <(<TypeName>)<Exp>> 
  Exp.PreInc    = <++<Exp>> 
  Exp.PreDec    = <--<Exp>> 
  Exp.UnOp      = <<UnaryOp> <Exp>> 
  Exp.Sizeof    = <sizeof <Exp>> 
  Exp.SizeofT   = <sizeof(<TypeName>)> 
  Exp.Subscript = <<Exp>[<Exp>]> 
  Exp.Call      = <<Exp>(<{Exp ", "}*>)> 
  Exp.Proj      = <<Exp>.<ID>> 
  Exp.DerefProj = [[Exp] -> [ID]]
  Exp.PostInc   = <<Exp>++> 
  Exp.PostDec   = <<Exp>--> 
  Exp.Var       = ID 
  Exp           = Constant 
  Exp.String    = STRING 
  Exp           = <(<Exp>)> {bracket}

context-free syntax

  ConstExp  = Exp 
  AssignExp = Exp 

context-free priorities

  ConstExp  = Exp  <0>. > Exp.Assign,
  AssignExp = Exp  <0>. > Exp.Comma

context-free priorities

  {Exp.Subscript
   Exp.Call
   Exp.Proj
   Exp.DerefProj
   Exp.PostInc
   Exp.PostDec
  } > {
   Exp.PreInc
   Exp.PreDec
   Exp.UnOp
   Exp.Sizeof
   Exp.SizeofT
  } 
  > Exp.Cast 
  > {left :
   Exp.Mul
   Exp.Div
   Exp.Mod
  } > {left :
    Exp.Add
    Exp.Sub
  } > {left :
    Exp.Lshift
    Exp.Rshift
  } > {left :
    Exp.Lt
    Exp.Gt
    Exp.Leq
    Exp.Geq
  } > {left :
    Exp.Eq
    Exp.Neq
  } 
  > Exp.And 
  > Exp.Eor > Exp.Ior 
  > Exp.LAnd > Exp.LOr 
  > Exp.Cond 
  > Exp.Assign 
  > Exp.Comma

context-free priorities

  {Exp ","}+ = Exp  <0>. > Exp.Comma,
  {Exp ","}+ = {Exp ","}+ "," Exp  <2>. > Exp.Comma

context-free priorities

  Exp.Assign <0>. > {Exp.Cast
                     Exp.Mul
                     Exp.Div
                     Exp.Mod
                     Exp.Add
                     Exp.Sub
                     Exp.Lshift
                     Exp.Rshift
                     Exp.Lt
                     Exp.Gt
                     Exp.Leq
                     Exp.Geq
                     Exp.Eq
                     Exp.Neq
                     Exp.And
                     Exp.Eor
                     Exp.Ior
                     Exp.LAnd
                     Exp.LOr
                     Exp.Cond}

context-free syntax

  AssignOp.Assign = <=> 
  AssignOp.AssignMul = <*=> 
  AssignOp.AssignDiv = </=> 
  AssignOp.AssignMod = <%=> 
  AssignOp.AssignAdd = <+=> 
  AssignOp.AssignMin = <-=> 
  AssignOp.AssignLsh = [<<=]
  AssignOp.AssignRsh = [>>=] 
  AssignOp.AssignAnd = <&=> 
  AssignOp.AssignPow = <^=> 
  AssignOp.AssignOr = <|=> 

context-free syntax

  UnaryOp.Addr = <&> 
  UnaryOp.Deref = <*> 
  UnaryOp.Uplus = <+> 
  UnaryOp.Umin = <-> 
  UnaryOp.Tilde = <~> 
  UnaryOp.Not = <!>
   
lexical restrictions

  "+" -/- [\+]
  "-" -/- [\-]
  




