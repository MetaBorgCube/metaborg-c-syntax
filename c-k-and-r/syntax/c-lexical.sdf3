module c-lexical

context-free syntax

  Constant = IntegerConstant 
  Constant = CharacterConstant 
  Constant = FloatingConstant 
  Constant = EnumerationConstant 
  
  EnumerationConstant.Enum = ID

lexical syntax // identifiers
  ID = [a-zA-Z\_] [a-zA-Z0-9\_]* 
lexical restrictions
  ID -/- [a-zA-Z0-9\_]
template options
  ID = keyword {reject}

 
context-free syntax // integer constants
  IntegerConstant.DecInt = DecInt 
  IntegerConstant.OctInt = OctInt 
  IntegerConstant.HexInt = HexInt 
lexical syntax
  DecInt = [0] LongUnsiged?
  DecInt = [1-9][0-9]* LongUnsiged?
  OctInt = [0][0-7]+ LongUnsiged?
  HexInt = [0][xX][0-9a-fA-F]+ LongUnsiged?
  LongUnsiged = [uU] [lL]?
  LongUnsiged = [lL] [uU]? 
lexical restrictions
  DecInt -/- [0-9uUlL]
  OctInt -/- [0-7uUlL]
  HexInt -/- [0-9a-fA-FuUlL]


context-free syntax
  FloatingConstant.Float = FLOAT
lexical syntax
  FLOAT =        "." [0-9]+ ([eE] [\-]? [0-9]+)? [fFlL]?
  FLOAT = [0-9]+ "." [0-9]+ ([eE] [\-]? [0-9]+)? [fFlL]?
lexical restrictions
  FLOAT -/- [0-9fFlLeE]
  

context-free syntax
  CharacterConstant.Char = CHAR 
lexical syntax 
  CHAR     = "`" CharChar "`"
  CharChar = ~[\\\`]
  CharChar = "\\" [ntvbrfa\\\?\`\"]
  CharChar = "\\ooo"
  CharChar = "\\x" [0-9a-fA-F] [0-9a-fA-F]


lexical syntax // strings
  STRING     = [L]? "\"" StringChar* "\"" 
  StringChar = ~[\"\n] 
  StringChar = "\\\"" 
  StringChar = BackSlashChar 
  BackSlashChar = "\\" 
lexical restrictions
  BackSlashChar -/- [\"]


lexical syntax // whitespace
  LAYOUT = [\ \t\n\r] 
context-free restrictions
  LAYOUT? -/- [\ \t\n\r]


lexical syntax // multi-line comments
  CommentChar = [\*] 
  LAYOUT = "/*" InsideComment* "*/" 
  InsideComment = ~[\*] 
  InsideComment = CommentChar 
lexical restrictions
  CommentChar -/- [\/]
context-free restrictions
  LAYOUT? -/- [\/].[\*]


lexical syntax // single-line comments
  LAYOUT = "//" ~[\n\r]* NewLineEOF 
  NewLineEOF = [\n\r] 
  NewLineEOF = EOF 
  EOF =  
lexical restrictions
  EOF -/- ~[]
context-free restrictions
  LAYOUT? -/- [\/].[\/]
  